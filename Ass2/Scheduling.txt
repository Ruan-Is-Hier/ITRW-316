using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace WindowsFormsApp1
{
    public partial class Form1 : Form
    {
        bool run = true;
        int z=0;
        int[] priority = new int[20];
        int[] arr = new int[20];
        int[] y = { 25, 75, 125, 175, 225};
        int x = 5;
        int totalProcesses=0;
        int[] robinarr = new int[10];

        public Form1()
        {
            InitializeComponent();
        }

        private void label5_Click(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {
            ThreadStart Priorityref = new ThreadStart(Priority);
            if (comboBox2.Text =="Priority")
            {
                PrioritySort();
                Thread Priority = new Thread(Priorityref);
                Priority.Start();
                
            }
            ThreadStart RoundRobinref = new ThreadStart(RoundRobin);
            if (comboBox2.Text == "Round Robin")
            {
                Thread RoundRobin = new Thread(RoundRobinref);
                RoundRobin.Start();
            }
            ThreadStart Multiref = new ThreadStart(MultipleQueues);
            if (comboBox2.Text == "Multiple Queues")
            {
                PrioritySort();
                Thread MultipleQueues = new Thread(Multiref);
                MultipleQueues.Start();
            }
        }

        private void comboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if(comboBox2.Text=="Priority" | comboBox2.Text == "Multiple Queues")
            {
                textBox2.Visible=true;
                label8.Visible = true;
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            if(totalProcesses<5)
            {
                arr[totalProcesses] = Int16.Parse(textBox1.Text);
                if(textBox2.Visible)
                {
                    priority[totalProcesses]=Int16.Parse(textBox2.Text);
                }
            }
            else
            {
                MessageBox.Show("Amount of processes reached.");
            }
            totalProcesses++;
        }
        public void Priority()
        {

            Graphics papier = pictureBox1.CreateGraphics();
            SolidBrush myBrush = new SolidBrush(Color.BlueViolet);
            if (run==false)
            {
                Thread.Sleep(100000000);
            }
            for (int i = 1; i <= totalProcesses; i++)
            {
                z++;
                int yi = y[priority[i]];
                for (int k = 1; k <= arr[priority[i]]; k++)
                {
                    papier.FillRectangle(myBrush, new Rectangle(x, yi, 15, 15));
                    x = x + 20;
                    Thread.Sleep(1200);
                }
            }
        }
        private void PrioritySort()
        {
            int q;

            for (int j = z; j < totalProcesses - 1; j++)
            {
                for (int l = z; l < totalProcesses; l++)
                {
                    if (priority[l] > priority[l + 1])
                    {
                        q = priority[l + 1];
                        priority[l + 1] = priority[l];
                        priority[l] = q;

                        q = priority[l + 1];
                        priority[l + 1] = priority[l];
                        priority[l] = q;

                    }
                }
            }
        }
        public void RoundRobin()
        {
            int t = 2;
            int times = 0;
            for (int l = 1; l <= 7; l++)
            {
                for (int i = 1; i <= totalProcesses; i++)
                {            
                    x = 5;
                    if (run == false)
                    {
                        Thread.Sleep(100000000);
                    }
                    t = robinarr[i];
                    if (t < arr[i])
                    {
                        if (t + 1 < arr[i])
                        {
                            times = 2;
                        }
                        else
                        {
                            times = 1;
                        }
                        for (int k = 1; k <= times; k++)
                        {
                            Graphics papier = pictureBox1.CreateGraphics();
                            SolidBrush myBrush = new SolidBrush(Color.Purple);
                            papier.FillRectangle(myBrush, new Rectangle(x, y[i], 15, 15));
                            x = x + 20;
                            Thread.Sleep(1000);                          
                        }
                    }
                    t = t + 2;
                    robinarr[i] = t;
                }
            }
            
        }
        public void MultipleQueues()
        {
            {
                for (int a = 1; a <= 5; a++)
                {
                    int t = 2;
                    int times = 0;
                    for (int l = 1; l <= 7; l++)
                    {
                        for (int i = 1; i <= totalProcesses; i++)
                        {
                            if (run == false)
                            {
                                Thread.Sleep(1000000);
                            }
                            int yi;
                            yi = y[priority[i]];
                            t = robinarr[i];
                            if (t < arr[i])
                            {
                                if (t + 1 < arr[i])
                                {
                                    times = 2;
                                }
                                else
                                {
                                    times = 1;
                                }
                                for (int k = 1; k <= times; k++)
                                {
                                    Graphics papier = pictureBox1.CreateGraphics();
                                    SolidBrush myBrush = new SolidBrush(Color.Purple);
                                    papier.FillRectangle(myBrush, new Rectangle(x, yi, 15, 15));
                                    x = x + 20;
                                    Thread.Sleep(1000);
                                    y[priority[i]] = yi;
                                }
                            }
                            t = t + 2;
                            robinarr[i] = t;
                            x = x + 30;
                        }
                    }
                }
            }
        }

        private void label7_Click(object sender, EventArgs e)
        {

        }

        private void button2_Click(object sender, EventArgs e)
        {
            run = false;
        }
    }
}
